@startuml

class CentroDeAtencion {
    - miCola: Cola
    - cajas: Caja[]
    + atiende(): void
    - queAtiendanLasCajas(): void
    - pasoACaja(unCliente: Cliente): void
    - dimeCajaLibre(cajas: Caja[]): Caja
    - hayCajaLibre(): boolean
}

class Caja {
    - abierta: boolean
    - cliente: Cliente
    - nombreDeCaja: String
    + estaLibre(): boolean
    + recibe(unCliente: Cliente): void
    + atiende(): void
    - despacha(): void
}

class Cliente {
    - packDeItems: int
    - nombreCliente: String
    + entregaProducto(): void
    + tieneProductos(): boolean
}

class Cola {
    - clientes: List<Cliente>
    - personasEnCola: int
    + addCliente(cliente: Cliente): void
    + removeCliente(): Cliente
    + tienePersonas(): boolean
}

class CentroComercial {
    - probabilidadLlegada: double
    - horaApertura: double
    - horaCierre: double
    - estaAbierto: boolean
    - hora: double
    - UN_MINUTO: double
    - COMPRA_MINIMA: int
    - COMPRA_MAXIMA: int
    - cajas: CentroDeAtencion
    - cola: Cola
    + atiende(): void
    - inventaNombre(): String
}

class List<T> {
}

class Node<T> {
}

interface IDataStructure<T> {
    + isEmpty(): boolean
    + size(): int
    + listData(): Object[]
}

Caja "1" o-- "0..1" Cliente 
Cola "1" o-- "*" Cliente 
CentroDeAtencion "1" -- "*" Caja : contiene >
CentroDeAtencion -- Cola : usa >
CentroComercial -- CentroDeAtencion : usa >
Cola -l- List 
List -- Node 
List .u.|> IDataStructure

@enduml
